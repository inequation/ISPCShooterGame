#!/usr/bin/python

global VariantCount, File
VariantCount = 8
File = open('CppCallbackMacros.h', 'w')

def EmitCallbackMacrosISPCSide(bUseReturnType):
	for Count in range(VariantCount):
		MacroArgs = ''
		ArgDeclVarying = '('
		ArgDeclUniform = '('
		ArgFwd = '('
		for Index in range(Count):
			MacroArgs += 'ArgType{0}, Arg{0}, '.format(Index)
			ArgDeclVarying += 'ArgType{0} varying Arg{0}'.format(Index)
			ArgDeclUniform += 'ArgType{0} uniform Arg{0}'.format(Index)
			ArgFwd += 'extract(Arg{0}, Index)'.format(Index)
			if Index != Count - 1:
				ArgDeclVarying += ', '
				ArgDeclUniform += ', '
				ArgFwd += ', '
		ArgDeclVarying += ')'
		ArgDeclUniform += ')'
		ArgFwd += ')'
		File.write(r'''	#define DefineCppCallback_{0}Arg{1}({2}FuncName, {3}CppCode)	\
		_CppCallbackTemplate{1}({2}FuncName, {4}, {5}, {6})
'''.format(
			Count,
			'_RetVal' if bUseReturnType else '',
			'ReturnType, ' if bUseReturnType else '',
			MacroArgs,
			ArgDeclVarying,
			ArgDeclUniform,
			ArgFwd))

def EmitCallbackMacrosCppSide(bUseReturnType, bFriendDeclarations):
	for Count in range(VariantCount):
		MacroArgs = ''
		ArgDecl = ''
		for Index in range(Count):
			MacroArgs += 'ArgType{0}, Arg{0}, '.format(Index)
			ArgDecl += 'ArgType{0} Arg{0}'.format(Index)
			if Index != Count - 1:
				ArgDecl += ', '
		ArgDecl += ''
		File.write(r'''	#define DefineCppCallback_{0}Arg{1}({2}FuncName, {3}CppCode)	\
		{4} {5} FuncName ## _CppCallback({6}){7}
'''.format(
			Count,
			'_RetVal' if bUseReturnType else '',
			'ReturnType, ' if bUseReturnType else '',
			MacroArgs,
			'friend extern "C"' if bFriendDeclarations else 'extern "C"',
			'ReturnType' if bUseReturnType else 'void',
			ArgDecl,
			';' if bFriendDeclarations else ' { CppCode }'))

File.write(r'''// Autogenerated by GenerateCallbackMacros.py, do not modify.
#pragma once

#include "CppInterop.h"

#ifdef ISPC
	#define _CppCallbackTemplate(FuncName, ArgDeclVarying, ArgDeclUniform, ArgFwd)	\
		inline void FuncName ArgDeclVarying	\
		{	\
			extern "C" void FuncName ## _CppCallback ArgDeclUniform;	\
			foreach_active (Index)	\
			{	\
				FuncName ## _CppCallback ArgFwd;	\
			}	\
		}

	#define _CppCallbackTemplate_RetVal(ReturnType, FuncName, ArgDeclVarying, ArgDeclUniform, ArgFwd)	\
		inline ReturnType varying FuncName ArgDeclVarying	\
		{	\
			extern "C" ReturnType uniform FuncName ## _CppCallback ArgDeclUniform;	\
			ReturnType varying ReturnValue;	\
			foreach_active (Index)	\
			{	\
				ReturnValue = insert(ReturnValue, Index, FuncName ## _CppCallback ArgFwd);	\
			}	\
		}

''')

EmitCallbackMacrosISPCSide(False)
EmitCallbackMacrosISPCSide(True)

File.write(r'''#elif EMIT_FRIEND_DECLARATIONS
''')

EmitCallbackMacrosCppSide(False, True)
EmitCallbackMacrosCppSide(True, True)

File.write(r'''#else
''')

EmitCallbackMacrosCppSide(False, False)
EmitCallbackMacrosCppSide(True, False)

File.write(r'''#endif
''')